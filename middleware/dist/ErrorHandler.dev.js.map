{"version":3,"sources":["ErrorHandler.js"],"names":["AppError","require","BadRequest","NotFound","UnauthorizedError","ErrorHandler","err","req","res","next","status","statusCode","json","message","name","errorMessage","Object","values","errors","map","val","join","code","duplicateKey","keys","keyValue","originalUrl","module","exports"],"mappings":"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","sourcesContent":["const AppError = require(\"../errors/AppError\");\r\nconst BadRequest = require(\"../errors/BadRequest\");\r\nconst NotFound = require(\"../errors/NotFound\");\r\nconst UnauthorizedError = require(\"../errors/unAuthorized\");\r\n\r\nconst ErrorHandler = (err, req, res, next) => {\r\n    switch (true) {\r\n        case err instanceof UnauthorizedError:\r\n            return res.status(err.statusCode).json({\r\n                status: 'fail',\r\n                message: err.message,\r\n            });\r\n        case err instanceof BadRequest:\r\n            return res.status(err.statusCode).json({\r\n                status: 'fail',\r\n                message: err.message,\r\n            });\r\n        case err instanceof NotFound:\r\n            return res.status(err.statusCode).json({\r\n                status: 'fail',\r\n                message: err.message,\r\n            });\r\n        case err.name === 'ValidationError':\r\n            const errorMessage = Object.values(err.errors).map(val => val.message).join(', ');\r\n            return res.status(400).json({\r\n                status: 'fail',\r\n                message: errorMessage,\r\n            });\r\n        case err.name === 'MongoServerError' && err.code === 11000:\r\n            const duplicateKey = Object.keys(err.keyValue)[0];\r\n            return res.status(400).json({\r\n                status: 'fail',\r\n                message: `The ${duplicateKey} is already taken.`,\r\n            });\r\n        case err.name === \"JsonWebTokenError\":\r\n            return res.status(401).json({\r\n                status: 'fail',\r\n                message: \"Invalid token. Please log in again.\",\r\n            });\r\n        case err.name === 'TokenExpiredError':\r\n            return res.status(401).json({\r\n                status: 'fail',\r\n                message: \"Token is expired. Please log in again.\",\r\n            });\r\n        case err.status === 404:\r\n            return res.status(404).json({\r\n                status: 'fail',\r\n                message: `Cannot find ${req.originalUrl} on this server.`,\r\n            });\r\n        default:\r\n            return res.status(500).json({\r\n                status: 'error',\r\n                message: 'Internal server error.',\r\n            });\r\n    }\r\n};\r\n\r\nmodule.exports = ErrorHandler;\r\n"],"file":"ErrorHandler.dev.js"}