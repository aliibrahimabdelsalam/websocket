{"version":3,"sources":["isAuth.js"],"names":["asyncHandler","require","AppError","promisify","UnauthorizedError","jwt","req","res","next","token","decoded","user","regeneratorRuntime","async","_context","prev","authorization","headers","startsWith","split","cookies","awrap","verify","process","env","SECRET_KEY","sent","User","findById","userId","iat","abrupt","stop"],"mappings":"aAAA,IAAMA,aAAeC,QAAQ,yBACvBC,SAAWD,QAAQ,sBADnBD,IAAAA,QAAY,yBAGAC,QAAQ,QAAnBE,mBAAAA,UAFDD,KAAQD,QAAGA,kBAIXG,kBAAoBH,QAAQ,0BAH5BI,OAAIJ,aAAQ,SAAlBK,EAAAC,EAAAC,GAAkB,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAN,MAAA,KAAA,EAAA,OACXL,EAAAA,QAMaa,eAAiBV,EAAIW,QAAQD,cAAcE,WAAW,UACjET,EAAQH,EAAIW,QAAQD,cAAcG,MAAM,KAAK,GAEzCb,EAAIc,QAAQf,MAPnBD,EAAAA,EAAAA,QAAoBH,KACEQ,GAAAD,EAAA,IAAAJ,kBAAA,mBAAA,MAJVU,EAAAN,KAAA,EAAAI,mBAAAS,MAIUlB,UAAAE,IAAAiB,OAAAnB,CAAAM,EAAAc,QAAAC,IAAAC,aAJV,KAAA,EAAA,OAIUf,EAJVI,EAAAY,KAAAZ,EAAAN,KAAA,EAAAI,mBAAAS,MAIUM,KAAAC,SAAAlB,EAAAmB,SAJV,KAAA,EAAA,IAIUlB,EAJVG,EAAAY,OAQTjB,EAAAA,IAAKL,kBAAeY,yBAApB,MAGDP,EAAAA,qBAAoBJ,EAApByB,KAXU,OAAAhB,EAAAiB,OAAA,SAYbvB,EAYO,IAAIJ,kBAVPK,2EACG,OAfMK,EAAAN,KAAA,GAAA,MAAA,KAAA,GAIUF,EAAAK,KAAAA,EA2BxBH,IA/Bc,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAkB,YAiBRtB,OAAAA,QAAAA","file":"isAuth.min.js","sourcesContent":["const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../errors/AppError');\r\nconst jwt=require('jsonwebtoken')\r\nconst {promisify}=require('util');\r\nconst User = require('../models/user');\r\nconst UnauthorizedError = require('../errors/unAuthorized');\r\nconst isAuth = asyncHandler(async (req, res, next) => {\r\n    \r\n    let token \r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n         token = req.headers.authorization.split(' ')[1];\r\n    }\r\n    else if (req.cookies.jwt) {\r\n        token = req.cookies.jwt;\r\n    }\r\n    \r\n    if (!token) {\r\n        next(new UnauthorizedError(\" not found token\",401))\r\n    }\r\n    const decoded = await promisify(jwt.verify)(token, process.env.SECRET_KEY)\r\n    const user = await User.findById(decoded.userId);\r\n    if (!user) {\r\n        next(new UnauthorizedError(\" the user is not exist\",401))\r\n    }\r\n    if (user.changedPasswordAfter(decoded.iat)) {\r\n        return next(\r\n            new UnauthorizedError(\r\n                'User Belong To This Token Recently Changed Password! Please Log In Again',\r\n                401\r\n            )\r\n        );\r\n    }\r\n        req.user = user;\r\n    next()\r\n})\r\nmodule.exports=isAuth"]}