{"version":3,"sources":["chatController.js"],"names":["asyncHandler","require","User","Chat","exports","accessChat","req","res","userId","chatData","newChat","createChat","fullChat","regeneratorRuntime","async","_context","prev","next","body","awrap","find","AppError","users","$elemMatch","$eq","user","_id","populate","sent","path","select","length","status","json","$and","chatName","findOne","data","stop","fetchChats","_context3","sort","updatedAt","then","results","_context2","chatGroup","group","_context4","isGroupChat","parse","console","log","abrupt","push","create","name","groupAdmin","_req$body","chatId","_context5","findByIdAndUpdate","new","runValidators","addUserToGroup","_req$body2","chat","_context6","deleteUserFromGroup","_req$body3","_context7","$pull"],"mappings":"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","file":"chatController.min.js","sourcesContent":["\r\nconst asyncHandler = require('express-async-handler');\r\nconst Chat = require('../models/chat');\r\nconst User = require('../models/user');\r\nconst AppError = require('../utils/AppError');\r\nexports.accessChat = asyncHandler(async (req, res, next) => {\r\n    const { userId } = req.body;\r\n    let chatData = await Chat.find({\r\n        $and: [\r\n            { users: { $elemMatch: { $eq: req.user._id } } },\r\n            { users: { $elemMatch: { $eq: userId } } },\r\n        ]\r\n    }).populate(\"users\", \"-password\").populate('message');\r\n    chatData = await User.populate(chatData, {\r\n        path: 'message.sender',\r\n        select:'name image email'\r\n    })\r\n    if (chatData.length>0) {      \r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data:chatData[0]\r\n        })\r\n    } else {\r\n        var newChat = {\r\n            users: [req.user._id, userId],\r\n            chatName: \"sender\",\r\n            isGroupChat:false\r\n        }\r\n        const createChat = await Chat.create(newChat);\r\n\r\n        const fullChat = await Chat.findOne({ _id: createChat._id })\r\n            .populate(\"users\", \"-password\");\r\n        if (!fullChat) {\r\n            throw new AppError(\"the chat not exist\",400)\r\n        }\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data:fullChat\r\n        })\r\n    }\r\n})\r\nexports.fetchChats = asyncHandler(async (req, res, next) => {\r\n         await Chat.find({ users: { $elemMatch: { $eq: req.user._id } } })\r\n        .populate('users', \"-password\")\r\n        .populate('groupAdmin', '-password')\r\n        .populate('message')\r\n        .sort({ updatedAt: -1 }).\r\n        then(async(results) => {\r\n            results=await User.populate(results, {\r\n                path: 'message.sender',\r\n                select:'name image email'\r\n            })\r\n            res.status(200).json({\r\n                status: \"success\",\r\n                data:results\r\n            })\r\n        })\r\n    next(new AppError('not found any chats for that user',400))\r\n\r\n})\r\nexports.createGroup = asyncHandler(async (req, res, next) => {\r\n    const users = JSON.parse(req.body.users);\r\n    console.log(users);\r\n    if (users.length < 2) {\r\n        return res.status(400).json({\r\n            status: 'Group should be more than 2',\r\n        })\r\n    }\r\n    users.push(req.user);\r\n        const chatGroup = await Chat.create({\r\n        chatName: req.body.name,\r\n        users,\r\n            isGroupChat: true,\r\n        groupAdmin:req.user\r\n        })\r\n    const group = await Chat.findOne({ _id: chatGroup._id })\r\n        .populate('users', '-password')\r\n        .populate('groupAdmin','-password')\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:group\r\n    })\r\n})\r\nexports.renameGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, chatName } = req.body;\r\n    if (!chatId || !chatName) {\r\n        next(new AppError(\"you should provide chatId and chatName \",400))\r\n    }\r\n    const newChat = await Chat.findByIdAndUpdate(chatId,{\r\n        chatName\r\n    }, {\r\n        new: true,\r\n        runValidators:true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:newChat\r\n    })\r\n})\r\nexports.addUserToGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $push: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\nexports.deleteUserFromGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $pull: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\n"]}