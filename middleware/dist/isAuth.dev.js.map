{"version":3,"sources":["isAuth.js"],"names":["asyncHandler","require","AppError","jwt","promisify","User","UnauthorizedError","isAuth","req","res","next","headers","authorization","startsWith","token","split","cookies","verify","process","env","SECRET_KEY","decoded","findById","userId","user","changedPasswordAfter","iat","module","exports"],"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAME,GAAG,GAACF,OAAO,CAAC,cAAD,CAAjB;;eACkBA,OAAO,CAAC,MAAD,C;IAAlBG,S,YAAAA,S;;AACP,IAAMC,IAAI,GAAGJ,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMK,iBAAiB,GAAGL,OAAO,CAAC,wBAAD,CAAjC;;AACA,IAAMM,MAAM,GAAGP,YAAY,CAAC,iBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGxB,cAAIF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,IAA6BJ,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BC,UAA1B,CAAqC,QAArC,CAAjC,EAAiF;AAC5EC,YAAAA,KAAK,GAAGN,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BG,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAR;AACJ,WAFD,MAGK,IAAIP,GAAG,CAACQ,OAAJ,CAAYb,GAAhB,EAAqB;AACtBW,YAAAA,KAAK,GAAGN,GAAG,CAACQ,OAAJ,CAAYb,GAApB;AACH;;AAED,cAAI,CAACW,KAAL,EAAY;AACRJ,YAAAA,IAAI,CAAC,IAAIJ,iBAAJ,CAAsB,kBAAtB,EAAyC,GAAzC,CAAD,CAAJ;AACH;;AAZuB;AAAA,0CAaFF,SAAS,CAACD,GAAG,CAACc,MAAL,CAAT,CAAsBH,KAAtB,EAA6BI,OAAO,CAACC,GAAR,CAAYC,UAAzC,CAbE;;AAAA;AAalBC,UAAAA,OAbkB;AAAA;AAAA,0CAcLhB,IAAI,CAACiB,QAAL,CAAcD,OAAO,CAACE,MAAtB,CAdK;;AAAA;AAclBC,UAAAA,IAdkB;;AAexB,cAAI,CAACA,IAAL,EAAW;AACPd,YAAAA,IAAI,CAAC,IAAIJ,iBAAJ,CAAsB,wBAAtB,EAA+C,GAA/C,CAAD,CAAJ;AACH;;AAjBuB,eAkBpBkB,IAAI,CAACC,oBAAL,CAA0BJ,OAAO,CAACK,GAAlC,CAlBoB;AAAA;AAAA;AAAA;;AAAA,2CAmBbhB,IAAI,CACP,IAAIJ,iBAAJ,CACI,0EADJ,EAEI,GAFJ,CADO,CAnBS;;AAAA;AA0BpBE,UAAAA,GAAG,CAACgB,IAAJ,GAAWA,IAAX;AACJd,UAAAA,IAAI;;AA3BoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA3B;AA6BAiB,MAAM,CAACC,OAAP,GAAerB,MAAf","sourcesContent":["const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../errors/AppError');\r\nconst jwt=require('jsonwebtoken')\r\nconst {promisify}=require('util');\r\nconst User = require('../models/user');\r\nconst UnauthorizedError = require('../errors/unAuthorized');\r\nconst isAuth = asyncHandler(async (req, res, next) => {\r\n    \r\n    let token \r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n         token = req.headers.authorization.split(' ')[1];\r\n    }\r\n    else if (req.cookies.jwt) {\r\n        token = req.cookies.jwt;\r\n    }\r\n    \r\n    if (!token) {\r\n        next(new UnauthorizedError(\" not found token\",401))\r\n    }\r\n    const decoded = await promisify(jwt.verify)(token, process.env.SECRET_KEY)\r\n    const user = await User.findById(decoded.userId);\r\n    if (!user) {\r\n        next(new UnauthorizedError(\" the user is not exist\",401))\r\n    }\r\n    if (user.changedPasswordAfter(decoded.iat)) {\r\n        return next(\r\n            new UnauthorizedError(\r\n                'User Belong To This Token Recently Changed Password! Please Log In Again',\r\n                401\r\n            )\r\n        );\r\n    }\r\n        req.user = user;\r\n    next()\r\n})\r\nmodule.exports=isAuth"],"file":"isAuth.dev.js"}