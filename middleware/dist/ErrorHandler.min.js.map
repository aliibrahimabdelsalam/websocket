{"version":3,"sources":["ErrorHandler.js"],"names":["AppError","require","BadRequest","UnauthorizedError","ErrorHandler","err","req","res","NotFound","status","statusCode","json","message","name","errorMessage","Object","values","errors","map","val","join","code","duplicateKey","keys","keyValue","concat","originalUrl","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,sBACnBC,WAAaD,QAAQ,wBADrBD,SAAWC,QAAQ,sBAGnBE,kBAAoBF,QAAQ,0BAE5BG,aAAe,SAACC,EAAKC,EAAKC,GAH1BC,QAAQ,GAKN,KAAKH,aAAeF,kBAApB,KAAQE,aAAYF,WAUpB,KAAKE,aAAeG,SALZ,OAAAD,EAAAE,OAAYP,EAApBQ,YAAAC,KAAA,CACcF,OAAQJ,OACNO,QAD2BP,EAAAO,UAAvC,IAAA,oBAAAP,EAAAQ,KAUA,IAAMC,EAAeC,OAAOC,OAAOX,EAAIY,QAAQC,IAAI,SAAAC,GAAG,OAAIA,EAAIP,UAASQ,KAAK,MANxE,OAAAb,EAAAE,OAAYD,KAApBG,KAAA,CACcF,OAAQJ,OACNO,QAD2BE,IAAvC,IAAA,qBAAAT,EAAAQ,MAAA,OAAAR,EAAAgB,KAWA,IAAMC,EAAeP,OAAOQ,KAAKlB,EAAImB,UAAU,GAP3C,OAAHjB,EAAaE,OAAA,KAAAE,KAAlB,CACUG,OAAY,OAAwCK,QAAIP,OAAAA,OAARU,EAAQV,wBAC9D,IAAkB,sBAAXL,EAAIE,KACPA,OAAQF,EADgBE,OAAA,KAAAE,KAAA,CAEjBF,OAAEK,OAFbF,QAAA,wCAIJ,IAAkB,sBAATC,EAAJA,KACKS,OAAAA,EAAYb,OAAGM,KAAOQ,KAAQ,CAC1Bd,OAAQ,OACNG,QADgB,2CAA5B,KAAA,MAAAP,EAAAI,OAeA,OAAOF,EAAIE,OAAO,KAAKE,KAAK,CAXvBE,OAAS,OACJD,QAAH,eAAAa,OAAqBnB,EAAAoB,YAArB,sBAEHd,QAFJ,OAAAL,EAAAE,OAAA,KAAAE,KAAA,CAgBIF,OAAQ,QAZPI,QAAS,6BAkB1Bc,OAAOC,QAAUxB","file":"ErrorHandler.min.js","sourcesContent":["const AppError = require(\"../errors/AppError\");\r\nconst BadRequest = require(\"../errors/BadRequest\");\r\nconst NotFound = require(\"../errors/NotFound\");\r\nconst UnauthorizedError = require(\"../errors/unAuthorized\");\r\n\r\nconst ErrorHandler = (err, req, res, next) => {\r\n    switch (true) {\r\n        case err instanceof UnauthorizedError:\r\n            return res.status(err.statusCode).json({\r\n                status: 'fail',\r\n                message: err.message,\r\n            });\r\n        case err instanceof BadRequest:\r\n            return res.status(err.statusCode).json({\r\n                status: 'fail',\r\n                message: err.message,\r\n            });\r\n        case err instanceof NotFound:\r\n            return res.status(err.statusCode).json({\r\n                status: 'fail',\r\n                message: err.message,\r\n            });\r\n        case err.name === 'ValidationError':\r\n            const errorMessage = Object.values(err.errors).map(val => val.message).join(', ');\r\n            return res.status(400).json({\r\n                status: 'fail',\r\n                message: errorMessage,\r\n            });\r\n        case err.name === 'MongoServerError' && err.code === 11000:\r\n            const duplicateKey = Object.keys(err.keyValue)[0];\r\n            return res.status(400).json({\r\n                status: 'fail',\r\n                message: `The ${duplicateKey} is already taken.`,\r\n            });\r\n        case err.name === \"JsonWebTokenError\":\r\n            return res.status(401).json({\r\n                status: 'fail',\r\n                message: \"Invalid token. Please log in again.\",\r\n            });\r\n        case err.name === 'TokenExpiredError':\r\n            return res.status(401).json({\r\n                status: 'fail',\r\n                message: \"Token is expired. Please log in again.\",\r\n            });\r\n        case err.status === 404:\r\n            return res.status(404).json({\r\n                status: 'fail',\r\n                message: `Cannot find ${req.originalUrl} on this server.`,\r\n            });\r\n        default:\r\n            return res.status(500).json({\r\n                status: 'error',\r\n                message: 'Internal server error.',\r\n            });\r\n    }\r\n};\r\n\r\nmodule.exports = ErrorHandler;\r\n"]}